unit Global_Functions;

interface

uses
  System.SysUtils, System.RegularExpressions, System.Hash, Vcl.Dialogs, Vcl.StdCtrls,FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, Vcl.Graphics, Vcl.ExtCtrls, System.Generics.Collections,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.DApt,Vcl.Controls, Vcl.Forms,Vcl.DBCtrls, ShellAPI,
  Data.DB, FireDAC.Comp.Client,FireDAC.Stan.Param, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef, DM_Connection,System.IOUtils,IdCoderMIME,
  Winapi.Windows, System.JSON, REST.Client, REST.Types, Data.Bind.Components, Data.Bind.ObjectScope, System.Classes,  System.NetEncoding,
  IdHTTP, IdSSL, IdSSLOpenSSL, System.Net.HttpClient, Vcl.Imaging.jpeg, Vcl.Imaging.pngimage, Winapi.GDIPAPI, Winapi.GDIPOBJ;


function APISupp(brand, category, subcategory: string): TJSONArray;
function GetCategoryID(Combobox: TComboBox): integer;
function GetSubcategoryID(Combobox: TComboBox): integer;
procedure LoadImage(image_src: string; Image: TImage);
procedure SelectBrands(ComboBox: TComboBox);
procedure SelectCategories(Combobox: TComboBox);
procedure SelectSubcategories(Combobox: TComboBox; id_category: integer);
procedure HideScrollbars(ScrollBox: TScrollBox);
procedure CheckConnection;
procedure InsertScrappTest(
  parent_tag, title_tag, img_tag, price_tag, url_tag,
  url_attribute, url_base, url_class, price_parent_tag,
  price_parent_class, price_code, price_integer, price_decimal,
  price_fraction, img_attribute, parent_class, title_class,
  price_class, img_class, alt_price_parent_tag, alt_price_parent_class,
  alt_img_tag, alt_img_class, alt_parent_class_2, alt_img_tag_2,
  alt_img_class_2, alt_parent_tag_2, alt_parent_tag, alt_parent_class: string
);

implementation

procedure LoadImage(image_src: string; Image: TImage);
var
  MemStream: TMemoryStream;
  queryTemp: TFDQuery;
begin
  MemStream := TMemoryStream.Create;
  queryTemp := TFDQuery.Create(nil);

//  image_src := StringReplace(image_src, '?', '', [rfReplaceAll]);
//  image_src := StringReplace(image_src, '&', '', [rfReplaceAll]);

  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT image_blob FROM images WHERE image_src = :image_src';
    queryTemp.ParamByName('image_src').AsString := image_src;
    queryTemp.Open;

    if not queryTemp.IsEmpty then
    begin
      TBlobField(queryTemp.FieldByName('image_blob')).SaveToStream(MemStream);

      MemStream.Position := 0;

      Image.Picture.Graphic := nil;
      Image.Picture.LoadFromStream(MemStream);
    end
    else
      ShowMessage('Imagem não encontrada.');
  finally
    MemStream.Free;
    queryTemp.Free;
  end;
end;

function APISupp(brand, category, subcategory: string): TJSONArray;
var
  RESTClient: TRESTClient;
  RESTRequest: TRESTRequest;
  RESTResponse: TRESTResponse;
  JSONValue: TJSONValue;
  URL: String;
begin
  RESTClient := TRESTClient.Create(nil);
  RESTRequest := TRESTRequest.Create(nil);
  RESTResponse := TRESTResponse.Create(nil);
  Result := TJSONArray.Create;

  try
    // Construindo a URL
    if subcategory = '' then
      URL := 'http://127.0.0.1:5000/' + brand + '?category=' + category
    else
      URL := 'http://127.0.0.1:5000/' + brand + '?category=' + category + '&subcategory=' + subcategory;

    RESTClient.BaseURL := URL;
    RESTRequest.Client := RESTClient;
    RESTRequest.Response := RESTResponse;
    RESTRequest.Method := rmGET;
    RESTRequest.Execute;

    // Parse JSON response
    JSONValue := TJSONObject.ParseJSONValue(RESTResponse.Content);
    try
      if (JSONValue is TJSONObject) and (TJSONObject(JSONValue).GetValue('products') <> nil) then
      begin
        Result := TJSONObject(JSONValue).GetValue<TJSONArray>('products').Clone as TJSONArray;
      end;
    finally
      JSONValue.Free;
    end;
  finally
    RESTClient.Free;
    RESTRequest.Free;
    RESTResponse.Free;
  end;
end;

procedure HideScrollbars(ScrollBox: TScrollBox);
begin
 ShowScrollBar(ScrollBox.Handle, SB_BOTH, False);
end;


procedure CheckConnection;
begin
  // Verifica se a conexão está ativa
  if not DM_Con.ConnectionScrappTest.Connected then
  begin
    try
      DM_Con.ConnectionScrappTest.Connected := True;
    except
      on E: Exception do
      begin
        ShowMessage('Erro ao conectar ao banco de dados: ' + E.Message);
      end;
    end;
  end;
end;



procedure SelectBrands(ComboBox: TComboBox);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT brand FROM brands';
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('brand').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

procedure SelectCategories(Combobox: TComboBox);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT category FROM categories';
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('category').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

procedure SelectSubcategories(Combobox: TComboBox; id_category: integer);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT subcategory FROM subcategories WHERE id_category = (SELECT id_category FROM categories WHERE id_category = :id_category)';
    queryTemp.ParamByName('id_category').AsInteger := id_category;
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('subcategory').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

procedure SelectTypes(Combobox: TComboBox; id_subcategory: integer);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT type FROM tyoes WHERE id_type = (SELECT id_subcategory FROM subcategories WHERE id_subcategory = :id_subcategory)';
    queryTemp.ParamByName('id_subcategory').AsInteger := id_subcategory;
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('type').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;


function GetCategoryID(Combobox: TComboBox): integer;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  Result := 0;
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT id_category FROM categories WHERE category = :category';
    queryTemp.ParamByName('category').AsString := Combobox.Text;
    queryTemp.Open;

    if not queryTemp.IsEmpty then
      Result := queryTemp.FieldByName('id_category').AsInteger
    else
      ShowMessage('Nenhuma categoria encontrada com o nome: ' + Combobox.Text);
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

function GetSubcategoryID(Combobox: TComboBox): integer;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  Result := 0;
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT id_subcategory FROM subcategories WHERE subcategory = :subcategory';
    queryTemp.ParamByName('subcategory').AsString := Combobox.Text;
    queryTemp.Open;

    if not queryTemp.IsEmpty then
      Result := queryTemp.FieldByName('id_subcategory').AsInteger
    else
      ShowMessage('Nenhuma categoria encontrada com o nome: ' + Combobox.Text);
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

procedure InsertScrappTest(
  parent_tag, parent_class,  title_tag, title_class, price_tag, price_class,
  img_tag, img_class,img_attribute, url_tag, url_class, url_attribute, url_base,
  alt_parent_tag, alt_parent_class, alt_parent_tag_2,alt_parent_class_2,
  alt_img_tag, alt_img_class,alt_img_tag_2, alt_img_class_2, price_parent_tag,
  price_parent_class,alt_price_parent_tag, alt_price_parent_class,
  price_code, price_integer, price_decimal, price_fraction, url_test: string
);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text :=
      'INSERT INTO ScrappTest (' +
      '    parent_tag, title_tag, img_tag, price_tag, url_tag, ' +
      '    url_attribute, url_base, url_class, price_parent_tag, ' +
      '    price_parent_class, price_code, price_integer, price_decimal, ' +
      '    price_fraction, img_attribute, parent_class, title_class, ' +
      '    price_class, img_class, alt_price_parent_tag, alt_price_parent_class, ' +
      '    alt_img_tag, alt_img_class, alt_parent_class_2, alt_img_tag_2, ' +
      '    alt_img_class_2, alt_parent_tag_2, alt_parent_tag, alt_parent_class' +
      ') VALUES (' +
      '    :parent_tag, :title_tag, :img_tag, :price_tag, :url_tag, ' +
      '    :url_attribute, :url_base, :url_class, :price_parent_tag, ' +
      '    :price_parent_class, :price_code, :price_integer, :price_decimal, ' +
      '    :price_fraction, :img_attribute, :parent_class, :title_class, ' +
      '    :price_class, :img_class, :alt_price_parent_tag, :alt_price_parent_class, ' +
      '    :alt_img_tag, :alt_img_class, :alt_parent_class_2, :alt_img_tag_2, ' +
      '    :alt_img_class_2, :alt_parent_tag_2, :alt_parent_tag, :alt_parent_class, :url_test' +
      ');';

    // Atribui valores aos parâmetros
    queryTemp.ParamByName('parent_tag').AsString := parent_tag;
    queryTemp.ParamByName('title_tag').AsString := title_tag;
    queryTemp.ParamByName('img_tag').AsString := img_tag;
    queryTemp.ParamByName('price_tag').AsString := price_tag;
    queryTemp.ParamByName('url_tag').AsString := url_tag;
    queryTemp.ParamByName('url_attribute').AsString := url_attribute;
    queryTemp.ParamByName('url_base').AsString := url_base;
    queryTemp.ParamByName('url_class').AsString := url_class;
    queryTemp.ParamByName('price_parent_tag').AsString := price_parent_tag;
    queryTemp.ParamByName('price_parent_class').AsString := price_parent_class;
    queryTemp.ParamByName('price_code').AsString := price_code;
    queryTemp.ParamByName('price_integer').AsString := price_integer;
    queryTemp.ParamByName('price_decimal').AsString := price_decimal;
    queryTemp.ParamByName('price_fraction').AsString := price_fraction;
    queryTemp.ParamByName('img_attribute').AsString := img_attribute;
    queryTemp.ParamByName('parent_class').AsString := parent_class;
    queryTemp.ParamByName('title_class').AsString := title_class;
    queryTemp.ParamByName('price_class').AsString := price_class;
    queryTemp.ParamByName('img_class').AsString := img_class;
    queryTemp.ParamByName('alt_price_parent_tag').AsString := alt_price_parent_tag;
    queryTemp.ParamByName('alt_price_parent_class').AsString := alt_price_parent_class;
    queryTemp.ParamByName('alt_img_tag').AsString := alt_img_tag;
    queryTemp.ParamByName('alt_img_class').AsString := alt_img_class;
    queryTemp.ParamByName('alt_parent_class_2').AsString := alt_parent_class_2;
    queryTemp.ParamByName('alt_img_tag_2').AsString := alt_img_tag_2;
    queryTemp.ParamByName('alt_img_class_2').AsString := alt_img_class_2;
    queryTemp.ParamByName('alt_parent_tag_2').AsString := alt_parent_tag_2;
    queryTemp.ParamByName('alt_parent_tag').AsString := alt_parent_tag;
    queryTemp.ParamByName('alt_parent_class').AsString := alt_parent_class;
    queryTemp.ParamByName('url_test').AsString := url_test;

    queryTemp.ExecSQL;

  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;



procedure DeleteConfig;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionScrappTest;

    CheckConnection;

    queryTemp.SQL.Text := 'DELETE FROM ScrappTest';
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

end.
