unit Global_Functions;

interface

uses
  System.SysUtils, System.RegularExpressions, System.Hash, Vcl.Dialogs, Vcl.StdCtrls,FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, Vcl.Graphics, Vcl.ExtCtrls, System.Generics.Collections,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.DApt,Vcl.Controls, Vcl.Forms,Vcl.DBCtrls, ShellAPI,
  Data.DB, FireDAC.Comp.Client,FireDAC.Stan.Param, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef, DM_Connection,System.IOUtils,IdCoderMIME,
  Winapi.Windows, System.JSON, REST.Client, REST.Types, Data.Bind.Components, Data.Bind.ObjectScope, System.Classes,  System.NetEncoding,
  IdHTTP, IdSSL, IdSSLOpenSSL, System.Net.HttpClient, Vcl.Imaging.jpeg, Vcl.Imaging.pngimage, Winapi.GDIPAPI, Winapi.GDIPOBJ;


function CheckIfUserExists(nameUser: TEdit): Boolean;
function CheckIfUserAndPasswordIsCorrect(nameUser, passwordUser: TEdit): Boolean;
function SignUpUser(nameUser, passwordUser, questionUser, questionAnswerUser: TEdit): Boolean;
function Encrypter(const passwordUser: string): string;
function CheckPasswordCharacters(passwordConfirmEdit: TEdit): Boolean;
function CheckUserCharacters(userEdit: TEdit): Boolean;
function CheckAnswerCharacters(answerConfirmEdit: TEdit): Boolean;
function CheckQuestionCharacters(questionEdit: TEdit): Boolean;
function LoadQuestion(nameUser: TEdit): string;
function CheckIfAnswerSecurityQuestionIsCorrect(nameUser, answerSecurityQuestionUser: TEdit): Boolean;
function UpdatePasswordUser(nameUser, newPasswordUser: TEdit): Boolean;
function CheckMatchPasswords(passwordEdit, passwordConfirmEdit: TEdit): Boolean;
function CheckMatchAnswers(answerEdit, answerConfirmEdit: TEdit): Boolean;
function GetUserID(nameUser: TEdit): integer;
function GetUserName(id_user: integer): string;
function APISupp(brand, category, subcategory: string): TJSONArray;
function GetCategoryID(Combobox: TComboBox): integer;
function GetSubcategoryID(Combobox: TComboBox): integer;
procedure GetImageUser(id_user: integer; Image: TImage);
procedure InsertImageUser(id_user: integer);
procedure HideScrollbars(ScrollBox: TScrollBox);
procedure LoadImage(image_src: string; Image: TImage);
procedure SelectBrands(ComboBox: TComboBox);
procedure SelectCategories(Combobox: TComboBox);
procedure SelectSubcategories(Combobox: TComboBox; id_category: integer);
procedure CheckConnection;

implementation

//              APIs

function APISupp(brand, category, subcategory: string): TJSONArray;
var
  RESTClient: TRESTClient;
  RESTRequest: TRESTRequest;
  RESTResponse: TRESTResponse;
  JSONValue: TJSONValue;
  URL: String;
begin
  RESTClient := TRESTClient.Create(nil);
  RESTRequest := TRESTRequest.Create(nil);
  RESTResponse := TRESTResponse.Create(nil);
  Result := TJSONArray.Create;

  try
    // Construindo a URL
    if subcategory = '' then
      URL := 'http://127.0.0.1:5000/' + brand + '?category=' + category
    else
      URL := 'http://127.0.0.1:5000/' + brand + '?category=' + category + '&subcategory=' + subcategory;

    RESTClient.BaseURL := URL;
    RESTClient.ReadTimeout := 600000;
    RESTRequest.Client := RESTClient;
    RESTRequest.Response := RESTResponse;
    RESTRequest.Method := rmGET;
    RESTRequest.Execute;

    // Parse JSON response
    JSONValue := TJSONObject.ParseJSONValue(RESTResponse.Content);
    try
      if (JSONValue is TJSONObject) and (TJSONObject(JSONValue).GetValue('products') <> nil) then
      begin
        Result := TJSONObject(JSONValue).GetValue<TJSONArray>('products').Clone as TJSONArray;
      end;
    finally
      JSONValue.Free;
    end;
  finally
    RESTClient.Free;
    RESTRequest.Free;
    RESTResponse.Free;
  end;
end;

//         Database MySQL Operations

procedure CheckConnection;
begin
  // Verifica se a conexão está ativa
  if not DM_Con.ConnectionMySQL.Connected then
  begin
    try
      DM_Con.ConnectionMySQL.Connected := True; // Conecta, se não estiver conectado
    except
      on E: Exception do
      begin
        ShowMessage('Erro ao conectar ao banco de dados: ' + E.Message);
      end;
    end;
  end;
end;

procedure LoadImage(image_src: string; Image: TImage);
var
  MemStream: TMemoryStream;
  queryTemp: TFDQuery;
begin
  MemStream := TMemoryStream.Create;
  queryTemp := TFDQuery.Create(nil);

//  image_src := StringReplace(image_src, '?', '', [rfReplaceAll]);
//  image_src := StringReplace(image_src, '&', '', [rfReplaceAll]);

  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT image_blob FROM images WHERE image_src = :image_src';
    queryTemp.ParamByName('image_src').AsString := image_src;
    queryTemp.Open;

    if not queryTemp.IsEmpty then
    begin
      TBlobField(queryTemp.FieldByName('image_blob')).SaveToStream(MemStream);

      MemStream.Position := 0;

      Image.Picture.Graphic := nil;
      Image.Picture.LoadFromStream(MemStream);
    end
    else
      ShowMessage('Imagem não encontrada.');
  finally
    MemStream.Free;
    queryTemp.Free;
  end;
end;


function GetUserName(id_user: integer): string;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  Result := '';
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT name_user FROM users WHERE id_user = :id_user';
    queryTemp.ParamByName('id_user').AsInteger := id_user;
    queryTemp.Open;

    Result := queryTemp.FieldByName('name_user').AsString;

    except
      on E: Exception do
      begin
      ShowMessage('Erro: ' + E.Message);
      end;
  end;
  queryTemp.Free;
end;

procedure GetImageUser(id_user: integer; Image: TImage);
var
  ImagemStream: TMemoryStream;
  queryTemp: TFDQuery;
begin

  queryTemp := TFDQuery.Create(nil);


  try

    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;


    queryTemp.Close;
    queryTemp.SQL.Text := 'SELECT image_user FROM users WHERE id_user = :id_user';
    queryTemp.ParamByName('id_user').AsInteger := id_user; // Exemplo de ID
    queryTemp.Open;

    if not queryTemp.FieldByName('image_user').IsNull then
    begin
      ImagemStream := TMemoryStream.Create;
      try

        TBlobField(queryTemp.FieldByName('image_user')).SaveToStream(ImagemStream);

        ImagemStream.Position := 0;


        Image.Picture.LoadFromStream(ImagemStream);
      finally
        ImagemStream.Free;
      end;
    end
    else
      ShowMessage('Imagem not found');
  finally
    queryTemp.Free;
  end;
end;

function CheckIfUserExists(nameUser: TEdit): Boolean;
var
  queryTemp: TFDQuery;
begin
  Result := False;
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT COUNT(*) AS Count FROM users WHERE name_user = :name_user';
    queryTemp.ParamByName('name_user').AsString := nameUser.Text;
    queryTemp.Open;

    if queryTemp.FieldByName('Count').AsInteger > 0 then
      begin
      Result := True;
      end;
    except
      on E: Exception do
      begin
      ShowMessage('Erro: ' + E.Message);
      end;
  end;
  queryTemp.Free;
end;

function GetUserID(nameUser: TEdit): integer;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  Result := 0;
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT id_user FROM users WHERE name_user = :name_user';
    queryTemp.ParamByName('name_user').AsString := nameUser.Text;
    queryTemp.Open;

    Result := queryTemp.FieldByName('id_user').AsInteger;

    except
      on E: Exception do
      begin
      ShowMessage('Erro: ' + E.Message);
      end;
  end;
  queryTemp.Free;
end;

function CheckIfUserAndPasswordIsCorrect(nameUser, passwordUser: TEdit): Boolean;
var
  queryTemp: TFDQuery;
  passwordUserEncrypted: string;
begin
  Result := False;

  passwordUserEncrypted := Encrypter(passwordUser.Text);

  queryTemp := TFDQuery.Create(nil);

  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT password_user AS password FROM users WHERE name_user = :name_user';
    queryTemp.ParamByName('name_user').AsString := nameUser.Text;
    queryTemp.Open;


    if not queryTemp.IsEmpty then
    begin
      if queryTemp.FieldByName('password').AsString = passwordUserEncrypted then
      begin
        Result := True;
      end;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
   end;
  end;
   queryTemp.Free;
end;

function SignUpUser(nameUser, passwordUser, questionUser, questionAnswerUser: TEdit): Boolean;
var
  queryTemp: TFDQuery;
  passwordUserEncrypted: string;
  questionAnswerUserEncrypted: string;
begin
  Result := False;
  queryTemp := TFDQuery.Create(nil);

  CheckConnection;

  passwordUserEncrypted := Encrypter(passwordUser.Text);
  questionAnswerUserEncrypted := Encrypter(questionAnswerUser.Text);

  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;
    queryTemp.Transaction := DM_Con.TransactionMySQL;

    CheckConnection;

    DM_Con.ConnectionMySQL.StartTransaction;
    try
      queryTemp.SQL.Text := 'INSERT INTO users (name_user, password_user, question_user, question_answer_user) VALUES (:name_user, :password_user, :question_user, :question_answer_user)';
      queryTemp.ParamByName('name_user').AsString := nameUser.Text;
      queryTemp.ParamByName('password_user').AsString := passwordUserEncrypted;
      queryTemp.ParamByName('question_user').AsString := questionUser.Text;
      queryTemp.ParamByName('question_answer_user').AsString := questionAnswerUserEncrypted;

      queryTemp.ExecSQL;
      DM_Con.ConnectionMySQL.Commit;

      Result := True;
    except
      on E: Exception do
      begin
        DM_Con.ConnectionMySQL.Rollback;
        ShowMessage(E.Message);
      end;
    end;
  finally
    queryTemp.Free;
  end;
end;


function LoadQuestion(nameUser: TEdit): string;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT question_user AS question FROM users WHERE name_user = :name_user';
    queryTemp.ParamByName('name_user').AsString := nameUser.Text;
    queryTemp.Open;

    if not queryTemp.IsEmpty then
      begin
      Result := queryTemp.FieldByName('question').AsString;
      end;
    except
      on E: Exception do
      begin
      ShowMessage('Erro: ' + E.Message);
      end;
  end;
  queryTemp.Free;
end;

function CheckIfAnswerSecurityQuestionIsCorrect(nameUser, answerSecurityQuestionUser: TEdit): Boolean;
var
  queryTemp: TFDQuery;
  answerSecurityQuestionUserEncrypted: string;
begin
  Result := False;

  answerSecurityQuestionUserEncrypted := Encrypter(answerSecurityQuestionUser.Text);

  queryTemp := TFDQuery.Create(nil);

  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT question_answer_user AS answer FROM users WHERE name_user = :name_user';
    queryTemp.ParamByName('name_user').AsString := nameUser.Text;
    queryTemp.Open;


    if not queryTemp.IsEmpty then
    begin
      if queryTemp.FieldByName('answer').AsString = answerSecurityQuestionUserEncrypted then
      begin
        Result := True;
      end;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
   end;
  end;
   queryTemp.Free;
end;

function UpdatePasswordUser(nameUser, newPasswordUser: TEdit): Boolean;
var
  queryTemp: TFDQuery;
  passwordUserEncrypted: string;
begin
  Result := False;
  queryTemp := TFDQuery.Create(nil);

  passwordUserEncrypted := Encrypter(newPasswordUser.Text);

  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;
    queryTemp.Transaction := DM_Con.TransactionMySQL;

    CheckConnection;

    DM_Con.ConnectionMySQL.StartTransaction;
    try
      queryTemp.SQL.Text := 'UPDATE users SET password_user = :password_user WHERE name_user = :name_user';
      queryTemp.ParamByName('name_user').AsString := nameUser.Text;
      queryTemp.ParamByName('password_user').AsString := passwordUserEncrypted;

      queryTemp.ExecSQL;
      DM_Con.ConnectionMySQL.Commit;

      Result := True;
    except
      on E: Exception do
      begin
        DM_Con.ConnectionMySQL.Rollback;
        ShowMessage(E.Message);
      end;
    end;
  finally
    queryTemp.Free;
  end;
end;

procedure InsertImageUser(id_user: integer);
var
  FileStream:  TFileStream;
  queryTemp: TFDQuery;
begin
   FileStream := nil;
  queryTemp := TFDQuery.Create(nil);


  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.Close;
    queryTemp.SQL.Text := 'INSERT INTO image_user  VALUES :image_user FROM users WHERE id_user = :id_user';
    queryTemp.ParamByName('id_user').AsInteger := id_user;

    try
      queryTemp.ParamByName('image_user').LoadFromStream(FileStream, ftBlob);
    finally
      FileStream.Free;
      queryTemp.Free;
    end;
  except
  on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
   end;

  end;
end;

procedure SelectBrands(ComboBox: TComboBox);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT brand FROM brands';
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('brand').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

procedure SelectCategories(Combobox: TComboBox);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT category FROM categories';
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('category').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

procedure SelectSubcategories(Combobox: TComboBox; id_category: integer);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT subcategory FROM subcategories WHERE id_category = (SELECT id_category FROM categories WHERE id_category = :id_category)';
    queryTemp.ParamByName('id_category').AsInteger := id_category;
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('subcategory').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

procedure SelectTypes(Combobox: TComboBox; id_subcategory: integer);
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT type FROM tyoes WHERE id_type = (SELECT id_subcategory FROM subcategories WHERE id_subcategory = :id_subcategory)';
    queryTemp.ParamByName('id_subcategory').AsInteger := id_subcategory;
    queryTemp.Open;

    ComboBox.Clear;

    while not queryTemp.Eof do
    begin
      ComboBox.Items.Add(queryTemp.FieldByName('type').AsString);
      queryTemp.Next;
    end;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;


function GetCategoryID(Combobox: TComboBox): integer;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  Result := 0;
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT id_category FROM categories WHERE category = :category';
    queryTemp.ParamByName('category').AsString := Combobox.Text;
    queryTemp.Open;

    if not queryTemp.IsEmpty then
      Result := queryTemp.FieldByName('id_category').AsInteger
    else
      ShowMessage('Nenhuma categoria encontrada com o nome: ' + Combobox.Text);
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

function GetSubcategoryID(Combobox: TComboBox): integer;
var
  queryTemp: TFDQuery;
begin
  queryTemp := TFDQuery.Create(nil);
  Result := 0;
  try
    queryTemp.Connection := DM_Con.ConnectionMySQL;

    CheckConnection;

    queryTemp.SQL.Text := 'SELECT id_subcategory FROM subcategories WHERE subcategory = :subcategory';
    queryTemp.ParamByName('subcategory').AsString := Combobox.Text;
    queryTemp.Open;

    if not queryTemp.IsEmpty then
      Result := queryTemp.FieldByName('id_subcategory').AsInteger
    else
      ShowMessage('Nenhuma categoria encontrada com o nome: ' + Combobox.Text);
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;
  queryTemp.Free;
end;

end.
