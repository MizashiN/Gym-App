unit Form_Main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls,
  Vcl.ButtonStylesAttributes, Vcl.StyledButton, Vcl.Imaging.jpeg, Vcl.StdCtrls,
  System.ImageList, Vcl.ImgList, Vcl.Imaging.pngimage, Vcl.ComCtrls,
  AdvPageControl, Frame_Home, Global_Functions;

type
  TMain = class(TForm)
    Panel1: TPanel;
    HomeSideBarButton: TStyledButton;
    DietSideBarButton: TStyledButton;
    GoalsSideBarButton: TStyledButton;
    GuideAndTipsSideBarButton: TStyledButton;
    SupplementsSideBarButton: TStyledButton;
    HistorySideBarButton: TStyledButton;
    AcessoriesSideBarButton: TStyledButton;
    AnabolSideBarButton: TStyledButton;
    Panel2: TPanel;
    Shape1: TShape;
    Panel3: TPanel;
    Image1: TImage;
    UserNameLabel: TLabel;
    StyledButton1: TStyledButton;
    Home: THome;
    procedure StatusButton(Button: TStyledButton);
    procedure SideBarButtonClick(Sender: TObject);
    procedure SwitchToFrame(TargetFrame: TFrame);
    procedure FrameHomeShow;
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    userID: integer;
  end;

var
  Main: TMain;

implementation

{$R *.dfm}

procedure TMain.StatusButton(Button: TStyledButton);
begin
  Button.Down := not Button.Down;
end;

procedure TMain.SideBarButtonClick(Sender: TObject);
var
  TargetFrame: TFrame;
begin
  if Sender is TStyledButton then
  begin
    // Atualiza o estado do botão
    StatusButton(TStyledButton(Sender));

    // Verifica qual Frame será ativado baseado na propriedade Tag do botão
    case TStyledButton(Sender).Tag of
      1: TargetFrame := Home; // Supondo que você tenha um TFrame chamado Frame1
      else
        Exit; // Se o Tag não corresponder a nenhum Frame, sai do método
    end;

    // Chama o método para alternar para o Frame selecionado
    SwitchToFrame(TargetFrame);
  end;
end;

procedure TMain.FormShow(Sender: TObject);
begin
SideBarButtonClick(HomeSideBarButton);
end;

procedure TMain.FrameHomeShow;
begin
  GetMotivationMessageAPI(Home.QuoteLabel, Home.AuthorLabel);
  GetNewsAPI(Home.TitleLabel, Home.ParagraphLabel);
  Home.usernameLabel.Caption := GetUserName(userID);
end;

procedure TMain.SwitchToFrame(TargetFrame: TFrame);
var
  I: Integer;
begin
  // Verifica se o TargetFrame já está visível e habilitado
  if TargetFrame.Visible and TargetFrame.Enabled then
  begin
    FrameHomeShow;
    Exit; // Se já estiver ativo, sai do método
  end;

  // Itera sobre todos os componentes do formulário para ocultar e desabilitar TFrame
  for I := 0 to ComponentCount - 1 do
  begin
    if Components[I] is TFrame then
    begin
      TFrame(Components[I]).Visible := False;
      TFrame(Components[I]).Enabled := False;
    end;
  end;

  // Torna o TargetFrame visível e habilitado
  TargetFrame.Visible := True;
  TargetFrame.Enabled := True;

  if TargetFrame = Home then
  begin
    GetMotivationMessageAPI(Home.QuoteLabel, Home.AuthorLabel);
  end;

end;

end.
